---
subcategory: "CosmosDB (DocumentDB)"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_cosmosdb_gremlin_database"
description: |-
  Manages a Gremlin Database within a Cosmos DB Account.
---

# azurermCosmosdbGremlinDatabase

Manages a Gremlin Database within a Cosmos DB Account.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azurerm.
For a more precise conversion please use the --provider flag in convert.*/
const dataAzurermCosmosdbAccountExample =
  new azurerm.dataAzurermCosmosdbAccount.DataAzurermCosmosdbAccount(
    this,
    "example",
    {
      name: "tfex-cosmosdb-account",
      resource_group_name: "tfex-cosmosdb-account-rg",
    }
  );
const azurermCosmosdbGremlinDatabaseExample =
  new azurerm.cosmosdbGremlinDatabase.CosmosdbGremlinDatabase(
    this,
    "example_1",
    {
      account_name: dataAzurermCosmosdbAccountExample.name,
      name: "tfex-cosmos-gremlin-db",
      resource_group_name: dataAzurermCosmosdbAccountExample.resourceGroupName,
      throughput: 400,
    }
  );
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
azurermCosmosdbGremlinDatabaseExample.overrideLogicalId("example");

```

## Argument Reference

The following arguments are supported:

*   `name` - (Required) Specifies the name of the Cosmos DB Gremlin Database. Changing this forces a new resource to be created.

*   `resourceGroupName` - (Required) The name of the resource group in which the Cosmos DB Gremlin Database is created. Changing this forces a new resource to be created.

*   `accountName` - (Required) The name of the CosmosDB Account to create the Gremlin Database within. Changing this forces a new resource to be created.

*   `throughput` - (Optional) The throughput of the Gremlin database (RU/s). Must be set in increments of `100`. The minimum value is `400`. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.

\~> **Note:** throughput has a maximum value of `1000000` unless a higher limit is requested via Azure Support

* `autoscaleSettings` - (Optional) An `autoscaleSettings` block as defined below. This must be set upon database creation otherwise it cannot be updated without a manual terraform destroy-apply.

\~> **Note:** Switching between autoscale and manual throughput is not supported via Terraform and must be completed via the Azure Portal and refreshed.

***

An `autoscaleSettings` block supports the following:

* `maxThroughput` - (Optional) The maximum throughput of the Gremlin database (RU/s). Must be between `1,000` and `1,000,000`. Must be set in increments of `1,000`. Conflicts with `throughput`.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the CosmosDB Gremlin Database.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the CosmosDB Gremlin Database.
* `update` - (Defaults to 30 minutes) Used when updating the CosmosDB Gremlin Database.
* `read` - (Defaults to 5 minutes) Used when retrieving the CosmosDB Gremlin Database.
* `delete` - (Defaults to 30 minutes) Used when deleting the CosmosDB Gremlin Database.

## Import

CosmosDB Gremlin Databases can be imported using the `resourceId`, e.g.

```console
terraform import azurerm_cosmosdb_gremlin_database.db1 /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/rg1/providers/Microsoft.DocumentDB/databaseAccounts/account1/gremlinDatabases/db1
```
