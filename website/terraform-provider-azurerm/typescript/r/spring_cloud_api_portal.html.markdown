---
subcategory: "Spring Cloud"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_spring_cloud_api_portal"
description: |-
  Manages a Spring Cloud API Portal.
---

# azurerm\_spring\_cloud\_api\_portal

Manages a Spring Cloud API Portal.

\-> **NOTE:** This resource is applicable only for Spring Cloud Service with enterprise tier.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azurerm.
For a more precise conversion please use the --provider flag in convert.*/
new azurerm.provider.AzurermProvider(this, "azurerm", {
  features: [{}],
});
const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
  this,
  "example",
  {
    location: "West Europe",
    name: "example-resources",
  }
);
const azurermSpringCloudServiceExample =
  new azurerm.springCloudService.SpringCloudService(this, "example_2", {
    location: azurermResourceGroupExample.location,
    name: "example",
    resource_group_name: azurermResourceGroupExample.name,
    sku_name: "E0",
  });
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
azurermSpringCloudServiceExample.overrideLogicalId("example");
const azurermSpringCloudGatewayExample =
  new azurerm.springCloudGateway.SpringCloudGateway(this, "example_3", {
    name: "default",
    spring_cloud_service_id: azurermSpringCloudServiceExample.id,
  });
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
azurermSpringCloudGatewayExample.overrideLogicalId("example");
const azurermSpringCloudApiPortalExample =
  new azurerm.springCloudApiPortal.SpringCloudApiPortal(this, "example_4", {
    gateway_ids: [azurermSpringCloudGatewayExample.id],
    https_only_enabled: false,
    instance_count: 1,
    name: "default",
    public_network_access_enabled: true,
    spring_cloud_service_id: azurermSpringCloudServiceExample.id,
    sso: [
      {
        client_id: "test",
        client_secret: "secret",
        issuer_uri: "https://www.example.com/issueToken",
        scope: ["read"],
      },
    ],
  });
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
azurermSpringCloudApiPortalExample.overrideLogicalId("example");

```

## Arguments Reference

The following arguments are supported:

*   `name` - (Required) The name which should be used for this Spring Cloud API Portal. Changing this forces a new Spring Cloud API Portal to be created. The only possible value is `default`.

*   `springCloudServiceId` - (Required) The ID of the Spring Cloud Service. Changing this forces a new Spring Cloud API Portal to be created.

***

*   `gatewayIds` - (Optional) Specifies a list of Spring Cloud Gateway.

*   `httpsOnlyEnabled` - (Optional) is only https is allowed?

*   `instanceCount` - (Optional) Specifies the required instance count of the Spring Cloud API Portal. Possible Values are between `1` and `500`. Defaults to `1` if not specified.

*   `publicNetworkAccessEnabled` - (Optional) Is the public network access enabled?

*   `sso` - (Optional) A `sso` block as defined below.

***

A `sso` block supports the following:

*   `clientId` - (Optional) The public identifier for the application.

*   `clientSecret` - (Optional) The secret known only to the application and the authorization server.

*   `issuerUri` - (Optional) The URI of Issuer Identifier.

*   `scope` - (Optional) It defines the specific actions applications can be allowed to do on a user's behalf.

## Attributes Reference

In addition to the Arguments listed above - the following Attributes are exported:

*   `id` - The ID of the Spring Cloud API Portal.

*   `url` - TODO.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 60 minutes) Used when creating the Spring Cloud API Portal.
* `read` - (Defaults to 5 minutes) Used when retrieving the Spring Cloud API Portal.
* `update` - (Defaults to 60 minutes) Used when updating the Spring Cloud API Portal.
* `delete` - (Defaults to 60 minutes) Used when deleting the Spring Cloud API Portal.

## Import

Spring Cloud API Portals can be imported using the `resourceId`, e.g.

```shell
terraform import azurerm_spring_cloud_api_portal.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/resourceGroup1/providers/Microsoft.AppPlatform/spring/service1/apiPortals/apiPortal1
```
