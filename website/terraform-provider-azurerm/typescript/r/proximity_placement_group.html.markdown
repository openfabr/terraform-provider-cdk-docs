---
subcategory: "Compute"
layout: "azurerm"
page_title: "Azure Resource Manager: azurerm_proximity_placement_group"
description: |-
  Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.

---

# azurerm\_proximity\_placement\_group

Manages a proximity placement group for virtual machines, virtual machine scale sets and availability sets.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as azurerm from "./.gen/providers/azurerm";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: azurerm.
For a more precise conversion please use the --provider flag in convert.*/
const azurermResourceGroupExample = new azurerm.resourceGroup.ResourceGroup(
  this,
  "example",
  {
    location: "West Europe",
    name: "example-resources",
  }
);
const azurermProximityPlacementGroupExample =
  new azurerm.proximityPlacementGroup.ProximityPlacementGroup(
    this,
    "example_1",
    {
      location: azurermResourceGroupExample.location,
      name: "exampleProximityPlacementGroup",
      resource_group_name: azurermResourceGroupExample.name,
      tags: {
        environment: "Production",
      },
    }
  );
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
azurermProximityPlacementGroupExample.overrideLogicalId("example");

```

## Argument Reference

The following arguments are supported:

*   `name` - (Required) Specifies the name of the proximity placement group. Changing this forces a new resource to be created.

*   `resourceGroupName` - (Required) The name of the resource group in which to create the availability set. Changing this forces a new resource to be created.

*   `location` - (Required) Specifies the supported Azure location where the resource exists. Changing this forces a new resource to be created.

*   `allowedVmSizes` - (Optional) Specifies the supported sizes of Virtual Machines that can be created in the Proximity Placement Group. Possible values are `basicA4`, `basicA1`, `basicA3`, `basicA2`, `basicA0`, `standardA8`, `standardA8V2`, `standardA8MV2`, `standardA5`, `standardA4`, `standardA4V2`, `standardA4MV2`, `standardA9`, `standardA1`, `standardA11`, `standardA1V2`, `standardA10`, `standardA7`, `standardA6`, `standardA3`, `standardA2`, `standardA2V2`, `standardA2MV2`, `standardA0`, `standardB8Ms`, `standardB4Ms`, `standardB1Ms`, `standardB1S`, `standardB2Ms`, `standardB2S`, `standardD8V3`, `standardD8SV3`, `standardD5V2`, `standardD4`, `standardD4V3`, `standardD4V2`, `standardD4SV3`, `standardD1`, `standardD15V2`, `standardD14`, `standardD14V2`, `standardD11`, `standardD11V2`, `standardD16V3`, `standardD16SV3`, `standardD13`, `standardD13V2`, `standardD12`, `standardD12V2`, `standardD1V2`, `standardDs5V2`, `standardDs4`, `standardDs4V2`, `standardDs1`, `standardDs15V2`, `standardDs14`, `standardDs148V2`, `standardDs144V2`, `standardDs14V2`, `standardDs11`, `standardDs11V2`, `standardDs13`, `standardDs134V2`, `standardDs132V2`, `standardDs13V2`, `standardDs12`, `standardDs12V2`, `standardDs1V2`, `standardDs3`, `standardDs3V2`, `standardDs2`, `standardDs2V2`, `standardD64V3`, `standardD64SV3`, `standardD3`, `standardD32V3`, `standardD32SV3`, `standardD3V2`, `standardD2`, `standardD2V3`, `standardD2V2`, `standardD2SV3`, `standardE8V3`, `standardE8SV3`, `standardE4V3`, `standardE4SV3`, `standardE16V3`, `standardE16SV3`, `standardE6416SV3`, `standardE6432SV3`, `standardE64V3`, `standardE64SV3`, `standardE328SV3`, `standardE3216V3`, `standardE32V3`, `standardE32SV3`, `standardE2V3`, `standardE2SV3`, `standardF8`, `standardF8S`, `standardF8SV2`, `standardF4`, `standardF4S`, `standardF4SV2`, `standardF1`, `standardF16`, `standardF16S`, `standardF16SV2`, `standardF1S`, `standardF72SV2`, `standardF64SV2`, `standardF32SV2`, `standardF2`, `standardF2S`, `standardF2SV2`, `standardG5`, `standardG4`, `standardG1`, `standardGs5`, `standardGs58`, `standardGs516`, `standardGs4`, `standardGs48`, `standardGs44`, `standardGs1`, `standardGs3`, `standardGs2`, `standardG3`, `standardG2`, `standardH8`, `standardH8M`, `standardH16`, `standardH16M`, `standardH16Mr`, `standardH16R`, `standardL8S`, `standardL4S`, `standardL16S`, `standardL32S`, `standardM12864Ms`, `standardM12832Ms`, `standardM128Ms`, `standardM128S`, `standardM6416Ms`, `standardM6432Ms`, `standardM64Ms`, `standardM64S`, `standardNc12`, `standardNc12SV3`, `standardNc12SV2`, `standardNc6`, `standardNc6SV3`, `standardNc6SV2`, `standardNc24`, `standardNc24R`, `standardNc24RsV3`, `standardNc24RsV2`, `standardNc24SV3`, `standardNc24SV2`, `standardNd12S`, `standardNd6S`, `standardNd24Rs`, `standardNd24S`, `standardNv12`, `standardNv6` and `standardNv24`.

*   `zone` - (Optional) Specifies the supported zone of the Proximity Placement Group. Changing this forces a new resource to be created.

\~> **NOTE:** `allowedVmSizes` must be set when `zone` is specified.

* `tags` - (Optional) A mapping of tags to assign to the resource.

## Attributes Reference

The following attributes are exported:

* `id` - The ID of the Proximity Placement Group.

## Timeouts

The `timeouts` block allows you to specify [timeouts](https://www.terraform.io/language/resources/syntax#operation-timeouts) for certain actions:

* `create` - (Defaults to 30 minutes) Used when creating the Proximity Placement Group.
* `update` - (Defaults to 30 minutes) Used when updating the Proximity Placement Group.
* `read` - (Defaults to 5 minutes) Used when retrieving the Proximity Placement Group.
* `delete` - (Defaults to 30 minutes) Used when deleting the Proximity Placement Group.

## Import

Proximity Placement Groups can be imported using the `resourceId`, e.g.

```shell
terraform import azurerm_proximity_placement_group.example /subscriptions/00000000-0000-0000-0000-000000000000/resourceGroups/example-rg/providers/Microsoft.Compute/proximityPlacementGroups/example-ppg
```
