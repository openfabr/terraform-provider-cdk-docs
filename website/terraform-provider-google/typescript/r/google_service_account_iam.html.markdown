---
subcategory: "Cloud Platform"
description: |-
 Collection of resources to manage IAM policy for a service account.
---

# IAM policy for service account

When managing IAM roles, you can treat a service account either as a resource or as an identity. This resource is to add iam policy bindings to a service account resource, such as allowing the members to run operations as or modify the service account. To configure permissions for a service account on other GCP resources, use the [google\_project\_iam](google_project_iam.html) set of resources.

Three different resources help you manage your IAM policy for a service account. Each of these resources serves a different use case:

* `googleServiceAccountIamPolicy`: Authoritative. Sets the IAM policy for the service account and replaces any existing policy already attached.
* `googleServiceAccountIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the service account are preserved.
* `googleServiceAccountIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the service account are preserved.

\~> **Note:** `googleServiceAccountIamPolicy` **cannot** be used in conjunction with `googleServiceAccountIamBinding` and `googleServiceAccountIamMember` or they will fight over what your policy should be.

\~> **Note:** `googleServiceAccountIamBinding` resources **can be** used in conjunction with `googleServiceAccountIamMember` resources **only if** they do not grant privilege to the same role.

## google\_service\_account\_iam\_policy

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleServiceAccountSa = new google.serviceAccount.ServiceAccount(
  this,
  "sa",
  {
    account_id: "my-service-account",
    display_name: "A service account that only Jane can interact with",
  }
);
const dataGoogleIamPolicyAdmin =
  new google.dataGoogleIamPolicy.DataGoogleIamPolicy(this, "admin", {
    binding: [
      {
        members: ["user:jane@example.com"],
        role: "roles/iam.serviceAccountUser",
      },
    ],
  });
new google.serviceAccountIamPolicy.ServiceAccountIamPolicy(
  this,
  "admin-account-iam",
  {
    policy_data: dataGoogleIamPolicyAdmin.policyData,
    service_account_id: googleServiceAccountSa.name,
  }
);

```

## google\_service\_account\_iam\_binding

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleServiceAccountSa = new google.serviceAccount.ServiceAccount(
  this,
  "sa",
  {
    account_id: "my-service-account",
    display_name: "A service account that only Jane can use",
  }
);
new google.serviceAccountIamBinding.ServiceAccountIamBinding(
  this,
  "admin-account-iam",
  {
    members: ["user:jane@example.com"],
    role: "roles/iam.serviceAccountUser",
    service_account_id: googleServiceAccountSa.name,
  }
);

```

With IAM Conditions:

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleServiceAccountSa = new google.serviceAccount.ServiceAccount(
  this,
  "sa",
  {
    account_id: "my-service-account",
    display_name: "A service account that only Jane can use",
  }
);
new google.serviceAccountIamBinding.ServiceAccountIamBinding(
  this,
  "admin-account-iam",
  {
    condition: [
      {
        description: "Expiring at midnight of 2019-12-31",
        expression: 'request.time < timestamp("2020-01-01T00:00:00Z")',
        title: "expires_after_2019_12_31",
      },
    ],
    members: ["user:jane@example.com"],
    role: "roles/iam.serviceAccountUser",
    service_account_id: googleServiceAccountSa.name,
  }
);

```

## google\_service\_account\_iam\_member

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleServiceAccountSa = new google.serviceAccount.ServiceAccount(
  this,
  "sa",
  {
    account_id: "my-service-account",
    display_name: "A service account that Jane can use",
  }
);
new google.serviceAccountIamMember.ServiceAccountIamMember(
  this,
  "admin-account-iam",
  {
    member: "user:jane@example.com",
    role: "roles/iam.serviceAccountUser",
    service_account_id: googleServiceAccountSa.name,
  }
);
const dataGoogleComputeDefaultServiceAccountDefault =
  new google.dataGoogleComputeDefaultServiceAccount.DataGoogleComputeDefaultServiceAccount(
    this,
    "default",
    {}
  );
new google.serviceAccountIamMember.ServiceAccountIamMember(
  this,
  "gce-default-account-iam",
  {
    member: `serviceAccount:\${${googleServiceAccountSa.email}}`,
    role: "roles/iam.serviceAccountUser",
    service_account_id: dataGoogleComputeDefaultServiceAccountDefault.name,
  }
);

```

With IAM Conditions:

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleServiceAccountSa = new google.serviceAccount.ServiceAccount(
  this,
  "sa",
  {
    account_id: "my-service-account",
    display_name: "A service account that Jane can use",
  }
);
new google.serviceAccountIamMember.ServiceAccountIamMember(
  this,
  "admin-account-iam",
  {
    condition: [
      {
        description: "Expiring at midnight of 2019-12-31",
        expression: 'request.time < timestamp("2020-01-01T00:00:00Z")',
        title: "expires_after_2019_12_31",
      },
    ],
    member: "user:jane@example.com",
    role: "roles/iam.serviceAccountUser",
    service_account_id: googleServiceAccountSa.name,
  }
);

```

## Argument Reference

The following arguments are supported:

*   `serviceAccountId` - (Required) The fully-qualified name of the service account to apply policy to.

*   `member/members` - (Required) Identities that will be granted the privilege in `role`.
    Each entry can have one of the following values:
    * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
    * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
    * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
    * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
    * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
    * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.

*   `role` - (Required) The role that should be applied. Only one
    `googleServiceAccountIamBinding` can be used per role. Note that custom roles must be of the format
    `[projects|organizations]/{parentName}/roles/{roleName}`.

*   `policyData` - (Required only by `googleServiceAccountIamPolicy`) The policy data generated by
    a `googleIamPolicy` data source.

*   `condition` - (Optional) An [IAM Condition](https://cloud.google.com/iam/docs/conditions-overview) for a given binding.
    Structure is [documented below](#nested_condition).

<a name="nested_condition"></a>The `condition` block supports:

*   `expression` - (Required) Textual representation of an expression in Common Expression Language syntax.

*   `title` - (Required) A title for the expression, i.e. a short string describing its purpose.

*   `description` - (Optional) An optional description of the expression. This is a longer text which describes the expression, e.g. when hovered over it in a UI.

\~> **Warning:** Terraform considers the `role` and condition contents (`title`+`description`+`expression`) as the
identifier for the binding. This means that if any part of the condition is changed out-of-band, Terraform will
consider it to be an entirely different resource and will treat it as such.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the service account IAM policy.

## Import

Service account IAM resources can be imported using the project, service account email, role, member identity, and condition (beta).

```console
$ terraform import google_service_account_iam_policy.admin-account-iam projects/{your-project-id}/serviceAccounts/{your-service-account-email}

$ terraform import google_service_account_iam_binding.admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser"

$ terraform import google_service_account_iam_member.admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/editor user:foo@example.com"
```

\-> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
full name of the custom role, e.g. `[projects/myProject|organizations/myOrg]/roles/myCustomRole`.

With conditions:

```console
$ terraform import google_service_account_iam_binding.admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser expires_after_2019_12_31"

$ terraform import google_service_account_iam_member.admin-account-iam "projects/{your-project-id}/serviceAccounts/{your-service-account-email} roles/iam.serviceAccountUser user:foo@example.com expires_after_2019_12_31"
```
