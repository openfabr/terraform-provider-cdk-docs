---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Access Approval"
description: |-
  Access Approval enables you to require your explicit approval whenever Google support and engineering need to access your customer content.
---

# google\_organization\_access\_approval\_settings

Access Approval enables you to require your explicit approval whenever Google support and engineering need to access your customer content.

To get more information about OrganizationSettings, see:

* [API documentation](https://cloud.google.com/access-approval/docs/reference/rest/v1/organizations)

## Example Usage - Organization Access Approval Full

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.organizationAccessApprovalSettings.OrganizationAccessApprovalSettings(
  this,
  "organization_access_approval",
  {
    enrolled_services: [
      {
        cloud_product: "appengine.googleapis.com",
      },
      {
        cloud_product: "dataflow.googleapis.com",
        enrollment_level: "BLOCK_ALL",
      },
    ],
    notification_emails: ["testuser@example.com", "example.user@example.com"],
    organization_id: "123456789",
  }
);

```

## Example Usage - Organization Access Approval Active Key Version

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const googleProjectMyProject = new google.project.Project(this, "my_project", {
  name: "My Project",
  org_id: "123456789",
  project_id: "your-project-id",
});
const dataGoogleAccessApprovalOrganizationServiceAccountServiceAccount =
  new google.dataGoogleAccessApprovalOrganizationServiceAccount.DataGoogleAccessApprovalOrganizationServiceAccount(
    this,
    "service_account",
    {
      organization_id: "123456789",
    }
  );
const googleKmsKeyRingKeyRing = new google.kmsKeyRing.KmsKeyRing(
  this,
  "key_ring",
  {
    location: "global",
    name: "key-ring",
    project: googleProjectMyProject.projectId,
  }
);
const googleKmsCryptoKeyCryptoKey = new google.kmsCryptoKey.KmsCryptoKey(
  this,
  "crypto_key",
  {
    key_ring: googleKmsKeyRingKeyRing.id,
    name: "crypto-key",
    purpose: "ASYMMETRIC_SIGN",
    version_template: [
      {
        algorithm: "EC_SIGN_P384_SHA384",
      },
    ],
  }
);
const googleKmsCryptoKeyIamMemberIam =
  new google.kmsCryptoKeyIamMember.KmsCryptoKeyIamMember(this, "iam", {
    crypto_key_id: googleKmsCryptoKeyCryptoKey.id,
    member: `serviceAccount:\${${dataGoogleAccessApprovalOrganizationServiceAccountServiceAccount.accountEmail}}`,
    role: "roles/cloudkms.signerVerifier",
  });
const dataGoogleKmsCryptoKeyVersionCryptoKeyVersion =
  new google.dataGoogleKmsCryptoKeyVersion.DataGoogleKmsCryptoKeyVersion(
    this,
    "crypto_key_version",
    {
      crypto_key: googleKmsCryptoKeyCryptoKey.id,
    }
  );
new google.organizationAccessApprovalSettings.OrganizationAccessApprovalSettings(
  this,
  "organization_access_approval",
  {
    active_key_version: dataGoogleKmsCryptoKeyVersionCryptoKeyVersion.name,
    depends_on: [`\${${googleKmsCryptoKeyIamMemberIam.fqn}}`],
    enrolled_services: [
      {
        cloud_product: "all",
      },
    ],
    organization_id: "123456789",
  }
);

```

## Argument Reference

The following arguments are supported:

*   `enrolledServices` -
    (Required)
    A list of Google Cloud Services for which the given resource has Access Approval enrolled.
    Access requests for the resource given by name against any of these services contained here will be required
    to have explicit approval. Enrollment can be done for individual services.
    A maximum of 10 enrolled services will be enforced, to be expanded as the set of supported services is expanded.
    Structure is [documented below](#nested_enrolled_services).

*   `organizationId` -
    (Required)
    ID of the organization of the access approval settings.

<a name="nested_enrolled_services"></a>The `enrolledServices` block supports:

*   `cloudProduct` -
    (Required)
    The product for which Access Approval will be enrolled. Allowed values are listed (case-sensitive):
    all
    appengine.googleapis.com
    bigquery.googleapis.com
    bigtable.googleapis.com
    cloudkms.googleapis.com
    compute.googleapis.com
    dataflow.googleapis.com
    iam.googleapis.com
    pubsub.googleapis.com
    storage.googleapis.com

*   `enrollmentLevel` -
    (Optional)
    The enrollment level of the service.
    Default value is `blockAll`.
    Possible values are `blockAll`.

***

*   `notificationEmails` -
    (Optional)
    A list of email addresses to which notifications relating to approval requests should be sent.
    Notifications relating to a resource will be sent to all emails in the settings of ancestor
    resources of that resource. A maximum of 50 email addresses are allowed.

*   `activeKeyVersion` -
    (Optional)
    The asymmetric crypto key version to use for signing approval requests.
    Empty active\_key\_version indicates that a Google-managed key should be used for signing.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

*   `id` - an identifier for the resource with format `organizations/{{organizationId}}/accessApprovalSettings`

*   `name` -
    The resource name of the settings. Format is "organizations/{organization\_id}/accessApprovalSettings"

*   `enrolledAncestor` -
    This field will always be unset for the organization since organizations do not have ancestors.

*   `ancestorHasActiveKeyVersion` -
    This field will always be unset for the organization since organizations do not have ancestors.

*   `invalidKeyVersion` -
    If the field is true, that indicates that there is some configuration issue with the active\_key\_version
    configured on this Organization (e.g. it doesn't exist or the Access Approval service account doesn't have the
    correct permissions on it, etc.).

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

* `create` - Default is 20 minutes.
* `update` - Default is 20 minutes.
* `delete` - Default is 20 minutes.

## Import

OrganizationSettings can be imported using any of these accepted formats:

```console
$ terraform import google_organization_access_approval_settings.default organizations/{{organization_id}}/accessApprovalSettings
$ terraform import google_organization_access_approval_settings.default {{organization_id}}
```
