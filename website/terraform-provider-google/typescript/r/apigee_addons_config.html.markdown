---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Apigee"
description: |-
  Configures the add-ons for the Apigee organization.
---

# google\_apigee\_addons\_config

Configures the add-ons for the Apigee organization. The existing add-on configuration will be fully replaced.

To get more information about AddonsConfig, see:

* [API documentation](https://cloud.google.com/apigee/docs/reference/apis/apigee/rest/v1/organizations#setaddons)
* How-to Guides
  * [Creating an API organization](https://cloud.google.com/apigee/docs/api-platform/get-started/create-org)

## Example Usage - Apigee Addons Basic

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.apigeeAddonsConfig.ApigeeAddonsConfig(this, "test_organization", {
  addons_config: [
    {
      api_security_config: [
        {
          enabled: true,
        },
      ],
      monetization_config: [
        {
          enabled: true,
        },
      ],
    },
  ],
  org: "test_organization",
});

```

## Example Usage - Apigee Addons Full

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const dataGoogleClientConfigCurrent =
  new google.dataGoogleClientConfig.DataGoogleClientConfig(this, "current", {});
const googleProjectServiceApigee = new google.projectService.ProjectService(
  this,
  "apigee",
  {
    project: dataGoogleClientConfigCurrent.project,
    service: "apigee.googleapis.com",
  }
);
const googleProjectServiceCompute = new google.projectService.ProjectService(
  this,
  "compute",
  {
    project: dataGoogleClientConfigCurrent.project,
    service: "compute.googleapis.com",
  }
);
new google.projectService.ProjectService(this, "servicenetworking", {
  project: dataGoogleClientConfigCurrent.project,
  service: "servicenetworking.googleapis.com",
});
const googleComputeNetworkApigeeNetwork =
  new google.computeNetwork.ComputeNetwork(this, "apigee_network", {
    depends_on: [`\${${googleProjectServiceCompute.fqn}}`],
    name: "apigee-network",
    project: dataGoogleClientConfigCurrent.project,
  });
const googleComputeGlobalAddressApigeeRange =
  new google.computeGlobalAddress.ComputeGlobalAddress(this, "apigee_range", {
    address_type: "INTERNAL",
    name: "apigee-range",
    network: googleComputeNetworkApigeeNetwork.id,
    prefix_length: 16,
    project: dataGoogleClientConfigCurrent.project,
    purpose: "VPC_PEERING",
  });
const googleServiceNetworkingConnectionApigeeVpcConnection =
  new google.serviceNetworkingConnection.ServiceNetworkingConnection(
    this,
    "apigee_vpc_connection",
    {
      network: googleComputeNetworkApigeeNetwork.id,
      reserved_peering_ranges: [googleComputeGlobalAddressApigeeRange.name],
      service: "servicenetworking.googleapis.com",
    }
  );
const googleApigeeOrganizationOrg =
  new google.apigeeOrganization.ApigeeOrganization(this, "org", {
    analytics_region: "us-central1",
    authorized_network: googleComputeNetworkApigeeNetwork.id,
    billing_type: "EVALUATION",
    depends_on: [
      `\${${googleServiceNetworkingConnectionApigeeVpcConnection.fqn}}`,
      `\${${googleProjectServiceApigee.fqn}}`,
    ],
    project_id: dataGoogleClientConfigCurrent.project,
  });
new google.apigeeAddonsConfig.ApigeeAddonsConfig(this, "test_organization", {
  addons_config: [
    {
      advanced_api_ops_config: [
        {
          enabled: true,
        },
      ],
      api_security_config: [
        {
          enabled: true,
        },
      ],
      connectors_platform_config: [
        {
          enabled: true,
        },
      ],
      integration_config: [
        {
          enabled: true,
        },
      ],
      monetization_config: [
        {
          enabled: true,
        },
      ],
    },
  ],
  org: googleApigeeOrganizationOrg.name,
});

```

## Argument Reference

The following arguments are supported:

* `org` -
  (Required)
  Name of the Apigee organization.

***

* `addonsConfig` -
  (Optional)
  Addon configurations of the Apigee organization.
  Structure is [documented below](#nested_addons_config).

<a name="nested_addons_config"></a>The `addonsConfig` block supports:

*   `advancedApiOpsConfig` -
    (Optional)
    Configuration for the Monetization add-on.
    Structure is [documented below](#nested_advanced_api_ops_config).

*   `integrationConfig` -
    (Optional)
    Configuration for the Monetization add-on.
    Structure is [documented below](#nested_integration_config).

*   `monetizationConfig` -
    (Optional)
    Configuration for the Monetization add-on.
    Structure is [documented below](#nested_monetization_config).

*   `apiSecurityConfig` -
    (Optional)
    Configuration for the Monetization add-on.
    Structure is [documented below](#nested_api_security_config).

*   `connectorsPlatformConfig` -
    (Optional)
    Configuration for the Monetization add-on.
    Structure is [documented below](#nested_connectors_platform_config).

<a name="nested_advanced_api_ops_config"></a>The `advancedApiOpsConfig` block supports:

* `enabled` -
  (Optional)
  Flag that specifies whether the Advanced API Ops add-on is enabled.

<a name="nested_integration_config"></a>The `integrationConfig` block supports:

* `enabled` -
  (Optional)
  Flag that specifies whether the Advanced API Ops add-on is enabled.

<a name="nested_monetization_config"></a>The `monetizationConfig` block supports:

* `enabled` -
  (Optional)
  Flag that specifies whether the Advanced API Ops add-on is enabled.

<a name="nested_api_security_config"></a>The `apiSecurityConfig` block supports:

*   `enabled` -
    (Optional)
    Flag that specifies whether the Advanced API Ops add-on is enabled.

*   `expiresAt` -
    (Output)
    Flag that specifies whether the Advanced API Ops add-on is enabled.

<a name="nested_connectors_platform_config"></a>The `connectorsPlatformConfig` block supports:

*   `enabled` -
    (Optional)
    Flag that specifies whether the Advanced API Ops add-on is enabled.

*   `expiresAt` -
    (Output)
    Flag that specifies whether the Advanced API Ops add-on is enabled.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are exported:

* `id` - an identifier for the resource with format `organizations/{{org}}`

## Timeouts

This resource provides the following
[Timeouts](https://developer.hashicorp.com/terraform/plugin/sdkv2/resources/retries-and-customizable-timeouts) configuration options:

* `create` - Default is 20 minutes.
* `update` - Default is 20 minutes.
* `delete` - Default is 20 minutes.

## Import

AddonsConfig can be imported using any of these accepted formats:

```console
$ terraform import google_apigee_addons_config.default organizations/{{name}}
$ terraform import google_apigee_addons_config.default {{name}}
```
