---
# ----------------------------------------------------------------------------
#
#     ***     AUTO GENERATED CODE    ***    Type: MMv1     ***
#
# ----------------------------------------------------------------------------
#
#     This file is automatically generated by Magic Modules and manual
#     changes will be clobbered when the file is regenerated.
#
#     Please read more about how to change this file in
#     .github/CONTRIBUTING.md.
#
# ----------------------------------------------------------------------------
subcategory: "Dataproc metastore"
description: |-
  Collection of resources to manage IAM policy for Dataproc metastore Federation
---

# IAM policy for Dataproc metastore Federation

Three different resources help you manage your IAM policy for Dataproc metastore Federation. Each of these resources serves a different use case:

* `googleDataprocMetastoreFederationIamPolicy`: Authoritative. Sets the IAM policy for the federation and replaces any existing policy already attached.
* `googleDataprocMetastoreFederationIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the federation are preserved.
* `googleDataprocMetastoreFederationIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the federation are preserved.

\~> **Note:** `googleDataprocMetastoreFederationIamPolicy` **cannot** be used in conjunction with `googleDataprocMetastoreFederationIamBinding` and `googleDataprocMetastoreFederationIamMember` or they will fight over what your policy should be.

\~> **Note:** `googleDataprocMetastoreFederationIamBinding` resources **can be** used in conjunction with `googleDataprocMetastoreFederationIamMember` resources **only if** they do not grant privilege to the same role.

\~> **Warning:** This resource is in beta, and should be used with the terraform-provider-google-beta provider.
See [Provider Versions](https://terraform.io/docs/providers/google/guides/provider_versions.html) for more details on beta resources.

## googleDataprocMetastoreFederationIamPolicy

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const dataGoogleIamPolicyAdmin =
  new google.dataGoogleIamPolicy.DataGoogleIamPolicy(this, "admin", {
    binding: [
      {
        members: ["user:jane@example.com"],
        role: "roles/viewer",
      },
    ],
    provider: "${google-beta}",
  });
new google.dataprocMetastoreFederationIamPolicy.DataprocMetastoreFederationIamPolicy(
  this,
  "policy",
  {
    federation_id:
      "${google_dataproc_metastore_federation.default.federation_id}",
    location: "${google_dataproc_metastore_federation.default.location}",
    policy_data: dataGoogleIamPolicyAdmin.policyData,
    project: "${google_dataproc_metastore_federation.default.project}",
    provider: "${google-beta}",
  }
);

```

## googleDataprocMetastoreFederationIamBinding

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.dataprocMetastoreFederationIamBinding.DataprocMetastoreFederationIamBinding(
  this,
  "binding",
  {
    federation_id:
      "${google_dataproc_metastore_federation.default.federation_id}",
    location: "${google_dataproc_metastore_federation.default.location}",
    members: ["user:jane@example.com"],
    project: "${google_dataproc_metastore_federation.default.project}",
    provider: "${google-beta}",
    role: "roles/viewer",
  }
);

```

## googleDataprocMetastoreFederationIamMember

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.dataprocMetastoreFederationIamMember.DataprocMetastoreFederationIamMember(
  this,
  "member",
  {
    federation_id:
      "${google_dataproc_metastore_federation.default.federation_id}",
    location: "${google_dataproc_metastore_federation.default.location}",
    member: "user:jane@example.com",
    project: "${google_dataproc_metastore_federation.default.project}",
    provider: "${google-beta}",
    role: "roles/viewer",
  }
);

```

## Argument Reference

The following arguments are supported:

*   `location` - (Required) The location where the metastore federation should reside.
    Used to find the parent resource to bind the IAM policy to

*   `project` - (Optional) The ID of the project in which the resource belongs.
    If it is not provided, the project will be parsed from the identifier of the parent resource. If no project is provided in the parent identifier and no project is specified, the provider project is used.

*   `member/members` - (Required) Identities that will be granted the privilege in `role`.
    Each entry can have one of the following values:
    * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
    * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
    * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
    * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
    * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
    * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.
    * **projectOwner:projectid**: Owners of the given project. For example, "projectOwner:my-example-project"
    * **projectEditor:projectid**: Editors of the given project. For example, "projectEditor:my-example-project"
    * **projectViewer:projectid**: Viewers of the given project. For example, "projectViewer:my-example-project"

*   `role` - (Required) The role that should be applied. Only one
    `googleDataprocMetastoreFederationIamBinding` can be used per role. Note that custom roles must be of the format
    `[projects|organizations]/{parentName}/roles/{roleName}`.

*   `policyData` - (Required only by `googleDataprocMetastoreFederationIamPolicy`) The policy data generated by
    a `googleIamPolicy` data source.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the IAM policy.

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* projects/{{project}}/locations/{{location}}/federations/{{federation\_id}}
* {{project}}/{{location}}/{{federation\_id}}
* {{location}}/{{federation\_id}}
* {{federation\_id}}

Any variables not passed in the import command will be taken from the provider configuration.

Dataproc metastore federation IAM resources can be imported using the resource identifiers, role, and member.

IAM member imports use space-delimited identifiers: the resource in question, the role, and the member identity, e.g.

```console
$ terraform import google_dataproc_metastore_federation_iam_member.editor "projects/{{project}}/locations/{{location}}/federations/{{federation_id}} roles/viewer user:jane@example.com"
```

IAM binding imports use space-delimited identifiers: the resource in question and the role, e.g.

```console
$ terraform import google_dataproc_metastore_federation_iam_binding.editor "projects/{{project}}/locations/{{location}}/federations/{{federation_id}} roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```console
$ terraform import google_dataproc_metastore_federation_iam_policy.editor projects/{{project}}/locations/{{location}}/federations/{{federation_id}}
```

\-> **Custom Roles**: If you're importing a IAM resource with a custom role, make sure to use the
full name of the custom role, e.g. `[projects/myProject|organizations/myOrg]/roles/myCustomRole`.

## User Project Overrides

This resource supports [User Project Overrides](https://registry.terraform.io/providers/hashicorp/google/latest/docs/guides/provider_reference#user_project_override).
