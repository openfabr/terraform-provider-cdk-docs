---
subcategory: "Cloud Spanner"
description: |-
 Collection of resources to manage IAM policy for a Spanner database.
---

# IAM policy for Spanner databases

Three different resources help you manage your IAM policy for a Spanner database. Each of these resources serves a different use case:

* `googleSpannerDatabaseIamPolicy`: Authoritative. Sets the IAM policy for the database and replaces any existing policy already attached.

\~> **Warning:** It's entirely possibly to lock yourself out of your database using `googleSpannerDatabaseIamPolicy`. Any permissions granted by default will be removed unless you include them in your config.

* `googleSpannerDatabaseIamBinding`: Authoritative for a given role. Updates the IAM policy to grant a role to a list of members. Other roles within the IAM policy for the database are preserved.
* `googleSpannerDatabaseIamMember`: Non-authoritative. Updates the IAM policy to grant a role to a new member. Other members for the role for the database are preserved.

\~> **Note:** `googleSpannerDatabaseIamPolicy` **cannot** be used in conjunction with `googleSpannerDatabaseIamBinding` and `googleSpannerDatabaseIamMember` or they will fight over what your policy should be.

\~> **Note:** `googleSpannerDatabaseIamBinding` resources **can be** used in conjunction with `googleSpannerDatabaseIamMember` resources **only if** they do not grant privilege to the same role.

## googleSpannerDatabaseIamPolicy

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
const dataGoogleIamPolicyAdmin =
  new google.dataGoogleIamPolicy.DataGoogleIamPolicy(this, "admin", {
    binding: [
      {
        members: ["user:jane@example.com"],
        role: "roles/editor",
      },
    ],
  });
new google.spannerDatabaseIamPolicy.SpannerDatabaseIamPolicy(this, "database", {
  database: "your-database-name",
  instance: "your-instance-name",
  policy_data: dataGoogleIamPolicyAdmin.policyData,
});

```

## googleSpannerDatabaseIamBinding

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.spannerDatabaseIamBinding.SpannerDatabaseIamBinding(
  this,
  "database",
  {
    database: "your-database-name",
    instance: "your-instance-name",
    members: ["user:jane@example.com"],
    role: "roles/compute.networkUser",
  }
);

```

## googleSpannerDatabaseIamMember

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as google from "./.gen/providers/google";
/*The following providers are missing schema information and might need manual adjustments to synthesize correctly: google.
For a more precise conversion please use the --provider flag in convert.*/
new google.spannerDatabaseIamMember.SpannerDatabaseIamMember(this, "database", {
  database: "your-database-name",
  instance: "your-instance-name",
  member: "user:jane@example.com",
  role: "roles/compute.networkUser",
});

```

## Argument Reference

The following arguments are supported:

*   `database` - (Required) The name of the Spanner database.

*   `instance` - (Required) The name of the Spanner instance the database belongs to.

*   `member/members` - (Required) Identities that will be granted the privilege in `role`.
    Each entry can have one of the following values:
    * **allUsers**: A special identifier that represents anyone who is on the internet; with or without a Google account.
    * **allAuthenticatedUsers**: A special identifier that represents anyone who is authenticated with a Google account or a service account.
    * **user:{emailid}**: An email address that represents a specific Google account. For example, alice@gmail.com or joe@example.com.
    * **serviceAccount:{emailid}**: An email address that represents a service account. For example, my-other-app@appspot.gserviceaccount.com.
    * **group:{emailid}**: An email address that represents a Google group. For example, admins@example.com.
    * **domain:{domain}**: A G Suite domain (primary, instead of alias) name that represents all the users of that domain. For example, google.com or example.com.

*   `role` - (Required) The role that should be applied. Only one
    `googleSpannerDatabaseIamBinding` can be used per role. Note that custom roles must be of the format
    `[projects|organizations]/{parentName}/roles/{roleName}`.

*   `policyData` - (Required only by `googleSpannerDatabaseIamPolicy`) The policy data generated by
    a `googleIamPolicy` data source.

*   `project` - (Optional) The ID of the project in which the resource belongs. If it
    is not provided, the provider project is used.

## Attributes Reference

In addition to the arguments listed above, the following computed attributes are
exported:

* `etag` - (Computed) The etag of the database's IAM policy.

## Import

For all import syntaxes, the "resource in question" can take any of the following forms:

* {{project}}/{{instance}}/{{database}}
* {{instance}}/{{database}} (project is taken from provider project)

IAM member imports use space-delimited identifiers; the resource in question, the role, and the member identity, e.g.

```console
$ terraform import google_spanner_database_iam_member.database "project-name/instance-name/database-name roles/viewer user:foo@example.com"
```

IAM binding imports use space-delimited identifiers; the resource in question and the role, e.g.

```console
$ terraform import google_spanner_database_iam_binding.database "project-name/instance-name/database-name roles/viewer"
```

IAM policy imports use the identifier of the resource in question, e.g.

```console
$ terraform import google_spanner_database_iam_policy.database project-name/instance-name/database-name
```

\-> **Custom Roles:** If you're importing a IAM resource with a custom role, make sure to use the
full name of the custom role, e.g. `[projects/myProject|organizations/myOrg]/roles/myCustomRole`.
