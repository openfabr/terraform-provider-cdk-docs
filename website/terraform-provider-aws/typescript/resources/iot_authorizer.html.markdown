---
subcategory: "IoT Core"
layout: "aws"
page_title: "AWS: aws_iot_authorizer"
description: |-
    Creates and manages an AWS IoT Authorizer.
---

# Resource: awsIotAuthorizer

Creates and manages an AWS IoT Authorizer.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
new aws.iotAuthorizer.IotAuthorizer(this, "example", {
  authorizerFunctionArn: "${aws_lambda_function.example.arn}",
  name: "example",
  signingDisabled: false,
  status: "ACTIVE",
  tokenKeyName: "Token-Header",
  tokenSigningPublicKeys: {
    Key1: '${file("test-fixtures/iot-authorizer-signing-key.pem")}',
  },
});

```

## Argument Reference

* `authorizerFunctionArn` - (Required) The ARN of the authorizer's Lambda function.
* `enableCachingForHttp`  - (Optional) Specifies whether the HTTP caching is enabled or not. Default: `false`.
* `name` - (Required) The name of the authorizer.
* `signingDisabled` - (Optional) Specifies whether AWS IoT validates the token signature in an authorization request. Default: `false`.
* `status` - (Optional) The status of Authorizer request at creation. Valid values: `active`, `inactive`. Default: `active`.
* `tokenKeyName` - (Optional) The name of the token key used to extract the token from the HTTP headers. This value is required if signing is enabled in your authorizer.
* `tokenSigningPublicKeys` - (Optional) The public keys used to verify the digital signature returned by your custom authentication service. This value is required if signing is enabled in your authorizer.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The ARN of the authorizer.

## Import

IOT Authorizers can be imported using the name, e.g.,

```console
$ terraform import aws_iot_authorizer.example example
```
