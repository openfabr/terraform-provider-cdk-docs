---
subcategory: "Route 53 Resolver"
layout: "aws"
page_title: "AWS: aws_route53_resolver_config"
description: |-
  Provides a Route 53 Resolver config resource.
---

# Resource: awsRoute53ResolverConfig

Provides a Route 53 Resolver config resource.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
const awsVpcExample = new aws.vpc.Vpc(this, "example", {
  cidrBlock: "10.0.0.0/16",
  enableDnsHostnames: true,
  enableDnsSupport: true,
});
const awsRoute53ResolverConfigExample =
  new aws.route53ResolverConfig.Route53ResolverConfig(this, "example_1", {
    autodefinedReverseFlag: "DISABLE",
    resourceId: awsVpcExample.id,
  });
/*This allows the Terraform resource name to match the original name. You can remove the call if you don't need them to match.*/
awsRoute53ResolverConfigExample.overrideLogicalId("example");

```

## Argument Reference

The following argument is supported:

* `resourceId` - (Required) The ID of the VPC that the configuration is for.
* `autodefinedReverseFlag` - (Required) Indicates whether or not the Resolver will create autodefined rules for reverse DNS lookups. Valid values: `enable`, `disable`.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The ID of the resolver configuration.
* `ownerId` - The AWS account ID of the owner of the VPC that this resolver configuration applies to.

## Import

Route 53 Resolver configs can be imported using the Route 53 Resolver config ID, e.g.,

```console
$ terraform import aws_route53_resolver_config.example rslvr-rc-715aa20c73a23da7
```
