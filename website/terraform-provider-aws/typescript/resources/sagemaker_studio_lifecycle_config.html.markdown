---
subcategory: "SageMaker"
layout: "aws"
page_title: "AWS: aws_sagemaker_studio_lifecycle_config"
description: |-
  Provides a SageMaker Studio Lifecycle Config resource.
---

# Resource: awsSagemakerStudioLifecycleConfig

Provides a SageMaker Studio Lifecycle Config resource.

## Example Usage

### Basic usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
new aws.sagemakerStudioLifecycleConfig.SagemakerStudioLifecycleConfig(
  this,
  "example",
  {
    studioLifecycleConfigAppType: "JupyterServer",
    studioLifecycleConfigContent: '${base64encode("echo Hello")}',
    studioLifecycleConfigName: "example",
  }
);

```

## Argument Reference

The following arguments are supported:

* `studioLifecycleConfigName` - (Required) The name of the Studio Lifecycle Configuration to create.
* `studioLifecycleConfigAppType` - (Required) The App type that the Lifecycle Configuration is attached to. Valid values are `jupyterServer` and `kernelGateway`.
* `studioLifecycleConfigContent` - (Required) The content of your Studio Lifecycle Configuration script. This content must be base64 encoded.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `id` - The name of the Studio Lifecycle Config.
* `arn` - The Amazon Resource Name (ARN) assigned by AWS to this Studio Lifecycle Config.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

SageMaker Studio Lifecycle Configs can be imported using the `studioLifecycleConfigName`, e.g.,

```console
$ terraform import aws_sagemaker_studio_lifecycle_config.example example
```
