---
subcategory: "License Manager"
layout: "aws"
page_title: "AWS: aws_licensemanager_license_configuration"
description: |-
  Provides a License Manager license configuration resource.
---

# Resource: awsLicensemanagerLicenseConfiguration

Provides a License Manager license configuration resource.

\~> **Note:** Removing the `licenseCount` attribute is not supported by the License Manager API - use `terraformTaintAwsLicensemanagerLicenseConfiguration.<id>` to recreate the resource instead.

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
new aws.licensemanagerLicenseConfiguration.LicensemanagerLicenseConfiguration(
  this,
  "example",
  {
    description: "Example",
    licenseCount: 10,
    licenseCountHardLimit: true,
    licenseCountingType: "Socket",
    licenseRules: ["#minimumSockets=2"],
    name: "Example",
    tags: {
      foo: "barr",
    },
  }
);

```

## Argument Reference

The following arguments are supported:

* `name` - (Required) Name of the license configuration.
* `description` - (Optional) Description of the license configuration.
* `licenseCount` - (Optional) Number of licenses managed by the license configuration.
* `licenseCountHardLimit` - (Optional) Sets the number of available licenses as a hard limit.
* `licenseCountingType` - (Required) Dimension to use to track license inventory. Specify either `vCpu`, `instance`, `core` or `socket`.
* `licenseRules` - (Optional) Array of configured License Manager rules.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.

## Rules

License rules should be in the format of `#ruleType=ruleValue`. Supported rule types:

* `minimumVcpus` - Resource must have minimum vCPU count in order to use the license. Default: 1
* `maximumVcpus` - Resource must have maximum vCPU count in order to use the license. Default: unbounded, limit: 10000
* `minimumCores` - Resource must have minimum core count in order to use the license. Default: 1
* `maximumCores` - Resource must have maximum core count in order to use the license. Default: unbounded, limit: 10000
* `minimumSockets` - Resource must have minimum socket count in order to use the license. Default: 1
* `maximumSockets` - Resource must have maximum socket count in order to use the license. Default: unbounded, limit: 10000
* `allowedTenancy` - Defines where the license can be used. If set, restricts license usage to selected tenancies. Specify a comma delimited list of `ec2Default`, `ec2DedicatedHost`, `ec2DedicatedInstance`

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The license configuration ARN.
* `id` - The license configuration ARN.
* `ownerAccountId` - Account ID of the owner of the license configuration.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Import

License configurations can be imported using the `id`, e.g.,

```console
$ terraform import aws_licensemanager_license_configuration.example arn:aws:license-manager:eu-west-1:123456789012:license-configuration:lic-0123456789abcdef0123456789abcdef
```
