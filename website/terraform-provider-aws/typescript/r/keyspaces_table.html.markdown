---
subcategory: "Keyspaces (for Apache Cassandra)"
layout: "aws"
page_title: "AWS: aws_keyspaces_table"
description: |-
  Provides a Keyspaces Table.
---

# Resource: aws\_keyspaces\_table

Provides a Keyspaces Table.

More information about Keyspaces tables can be found in the [Keyspaces Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/working-with-tables.html).

## Example Usage

```typescript
/*Provider bindings are generated by running cdktf get.
See https://cdk.tf/provider-generation for more details.*/
import * as aws from "./.gen/providers/aws";
new aws.keyspacesTable.KeyspacesTable(this, "example", {
  keyspaceName: "${aws_keyspaces_keyspace.example.name}",
  schemaDefinition: {
    column: [
      {
        name: "Message",
        type: "ASCII",
      },
    ],
    partitionKey: [
      {
        name: "Message",
      },
    ],
  },
  tableName: "my_table",
});

```

## Argument Reference

The following arguments are required:

* `keyspaceName` - (Required) The name of the keyspace that the table is going to be created in.
* `tableName` - (Required) The name of the table.

The following arguments are optional:

* `capacitySpecification` - (Optional) Specifies the read/write throughput capacity mode for the table.
* `comment` - (Optional) A description of the table.
* `defaultTimeToLive` - (Optional) The default Time to Live setting in seconds for the table. More information can be found in the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL-how-it-works.html#ttl-howitworks_default_ttl).
* `encryptionSpecification` - (Optional) Specifies how the encryption key for encryption at rest is managed for the table. More information can be found in the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/EncryptionAtRest.html).
* `pointInTimeRecovery` - (Optional) Specifies if point-in-time recovery is enabled or disabled for the table. More information can be found in the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/PointInTimeRecovery.html).
* `schemaDefinition` - (Optional) Describes the schema of the table.
* `tags` - (Optional) A map of tags to assign to the resource. If configured with a provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block) present, tags with matching keys will overwrite those defined at the provider-level.
* `ttl` - (Optional) Enables Time to Live custom settings for the table. More information can be found in the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/TTL.html).

The `capacitySpecification` object takes the following arguments:

* `readCapacityUnits` - (Optional) The throughput capacity specified for read operations defined in read capacity units (RCUs).
* `throughputMode` - (Optional) The read/write throughput capacity mode for a table. Valid values: `payPerRequest`, `provisioned`. The default value is `payPerRequest`.
* `writeCapacityUnits` - (Optional) The throughput capacity specified for write operations defined in write capacity units (WCUs).

The `comment` object takes the following arguments:

* `message` - (Required) A description of the table.

The `encryptionSpecification` object takes the following arguments:

* `kmsKeyIdentifier` - (Optional) The Amazon Resource Name (ARN) of the customer managed KMS key.
* `type` - (Optional) The encryption option specified for the table. Valid values: `awsOwnedKmsKey`, `customerManagedKmsKey`. The default value is `awsOwnedKmsKey`.

The `pointInTimeRecovery` object takes the following arguments:

* `status` - (Optional) Valid values: `enabled`, `disabled`. The default value is `disabled`.

The `schemaDefinition` object takes the following arguments:

* `column` - (Required) The regular columns of the table.
* `partitionKey` - (Required) The columns that are part of the partition key of the table .
* `clusteringKey` - (Required) The columns that are part of the clustering key of the table.
* `staticColumn` - (Required) The columns that have been defined as `static`. Static columns store values that are shared by all rows in the same partition.

The `column` object takes the following arguments:

* `name` - (Required) The name of the column.
* `type` - (Required) The data type of the column. See the [Developer Guide](https://docs.aws.amazon.com/keyspaces/latest/devguide/cql.elements.html#cql.data-types) for a list of available data types.

The `partitionKey` object takes the following arguments:

* `name` - (Required) The name of the partition key column.

The `clusteringKey` object takes the following arguments:

* `name` - (Required) The name of the clustering key column.
* `orderBy` - (Required) The order modifier. Valid values: `asc`, `desc`.

The `staticColumn` object takes the following arguments:

* `name` - (Required) The name of the static column.

The `ttl` object takes the following arguments:

* `status` - (Optional) Valid values: `enabled`.

## Attributes Reference

In addition to all arguments above, the following attributes are exported:

* `arn` - The ARN of the table.
* `tagsAll` - A map of tags assigned to the resource, including those inherited from the provider [`defaultTags` configuration block](https://registry.terraform.io/providers/hashicorp/aws/latest/docs#default_tags-configuration-block).

## Timeouts

[Configuration options](https://developer.hashicorp.com/terraform/language/resources/syntax#operation-timeouts):

* `create` - (Default `10M`)
* `update` - (Default `30M`)
* `delete` - (Default `10M`)

## Import

Use the `keyspaceName` and `tableName` separated by `/` to import a table. For example:

```console
$ terraform import aws_keyspaces_table.example my_keyspace/my_table
```
